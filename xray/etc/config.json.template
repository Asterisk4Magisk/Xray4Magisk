// Config file of xray. This file follows standard JSON format, with comments support.
// Uncomment entries below to satisfy your needs. Also read our manual for more detail at
// https://github.com/XTLS/Xray-core
{
  "log": {
    // By default, xray writes access log to stdout.
    // "access": "/path/to/access/log/file",
    "access": "none",

    // By default, xray write error log to stdout.
    // "error": "/path/to/error/log/file",
    "error": "/data/xray/run/error.log",

    // Log level, one of "debug", "info", "warning", "error", "none"
    "loglevel": "warning"
  },
  // List of inbound proxy configurations.
  "inbounds": [{
    // Port to listen on. You may need root access if the value is less than 1024.
    "port": 65535,

    // IP address to listen on. Change to "0.0.0.0" to listen on all network interfaces.
    "listen": "0.0.0.0",

    // Tag of the inbound proxy. May be used for routing.
    "tag": "proxy-inbound",

    // Protocol name of inbound proxy.
    "protocol": "dokodemo-door",

    // Settings of the protocol. Varies based on protocol.
    "settings": {
      // Disable timeout setting for keeping persistent connection. Such as FCM.   
      //  "timeout": 10,
      "network": "tcp,udp",
      "followRedirect": true
    },

    // If you wanna bypass BT streams, you should enable it.
    "sniffing": {
      "enabled": false
    //  ,
    //  "destOverride": ["http", "tls"]
    }
  }],
  // List of outbound proxy configurations.
  "outbounds": [{
    // Replace your proxy protocol in this section, like: VMESS, VLESS or Shadowsocks
    "protocol": "freedom",

    // Settings of the protocol. Varies based on protocol.
    "settings": {},

    // Tag of the outbound. May be used for routing.
    "tag": "proxy"
  },{
    // Protocol name of the outbound proxy.
    "protocol": "freedom",

    // Settings of the protocol. Varies based on protocol.
    "settings": {},

    // Tag of the outbound. May be used for routing.
    "tag": "direct"
  },{
    "protocol": "blackhole",
    "settings": {},
    "tag": "blocked"
  }],

  // Transport is for global transport settings. If you have multiple transports with same settings
  // (say mKCP), you may put it here, instead of in each individual inbound/outbounds.
  //"transport": {},

  // Routing controls how traffic from inbounds are sent to outbounds.
  "routing": {
    "domainStrategy": "AsIs",
    "rules":[
      {
        // Bypass private IPs.
        "type": "field",
        "ip": ["geoip:private"],
        "outboundTag": "direct"
      },
      {
        // Bypass all china IPs.
        "type": "field",
        "ip": ["geoip:cn"],
        "outboundTag": "direct"
      }
      //,
      //{
        // Bypass all china sites.
      //  "type": "field",
      //  "domain": ["geosite:cn"],
      //  "outboundTag": "direct"
      //},
      //{
        // To bypass all BT streams, you should enable sniffing.
      //  "type": "field",
      //  "protocol":["bittorrent"], 
      //  "outboundTag": "direct"
      //},
      //{
        // If your network condition not very well, you could bypass dnscrypt-proxy's upstream DNS.
      //  "type": "field",
      //  "domain": [
      //    "cloudflare-dns.com",
      //    "doh.opendns.com",
      //    "dns.google"
      //  ],
      //  "outboundTag": "direct"
      //},
      //{
        // Blocks major ads.
      //  "type": "field",
      //  "domain": ["geosite:category-ads"],
      //  "outboundTag": "blocked"
      //}
    ]
  },

  // Policy controls some internal behavior of how xray handles connections.
  // It may be on connection level by user levels in 'levels', or global settings in 'system.'
  "policy": {
    // Connection policys by user levels
    "levels": {
      "0": {
        "uplinkOnly": 0,
        "downlinkOnly": 0
      }
    },
    "system": {
      "statsInboundUplink": false,
      "statsInboundDownlink": false
    }
  },

  // Stats enables internal stats counter.
  // This setting can be used together with Policy and Api. 
  //"stats":{},

  // Api enables gRPC APIs for external programs to communicate with xray instance.
  //"api": {
    //"tag": "api",
    //"services": [
    //  "HandlerService",
    //  "LoggerService",
    //  "StatsService"
    //]
  //},

  // You may add other entries to the configuration, but they will not be recognized by xray.
  "other": {}
}
